{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MeanJun/MusicGenre/blob/main/MusicGenre/MLPClassifier\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "arsSjc84V0RB",
        "outputId": "c2504797-e9f9-48e6-c40c-6a947de62ac2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from sklearn import preprocessing\n",
        "from sklearn import neural_network\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.linear_model import LogisticRegressionCV\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.svm import LinearSVC\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.pipeline import Pipeline\n",
        "import pandas as pd\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import ConfusionMatrixDisplay\n",
        "\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf"
      ],
      "metadata": {
        "id": "LvPPAk6a1c-W"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Set the seed for the Python random number generator\n",
        "np.random.seed(42)"
      ],
      "metadata": {
        "id": "RBIWpuj-qNdf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#I have different file directory\n",
        "df = pd.read_csv(\"/content/drive/MyDrive/Study/ML/ML_Project_Frequency_Distributions.csv\")\n",
        "y = df['Genre']\n",
        "\n",
        "Xi = []\n",
        "for column_name in df.columns:\n",
        "  if '0' in column_name:\n",
        "    Xi.append(column_name)\n",
        "\n",
        "X = df[Xi]\n",
        "display(X)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "CShUJAZw4Z4N",
        "outputId": "d734352a-c71b-4269-a128-7462c87f41e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                0           200           400           600          800  \\\n",
              "0         1043621  6.174077e+07  2.047628e+08  3.878327e+08  43762172.30   \n",
              "1         2126883  1.391849e+08  8.998469e+07  1.171315e+08  79548896.75   \n",
              "2         3638673  7.667548e+06  1.335264e+07  1.898063e+07  22041971.77   \n",
              "3         2498355  2.452500e+08  6.596359e+07  9.187554e+07  52900587.70   \n",
              "4     12633950144  2.344230e+07  7.651874e+07  9.061877e+06  88275540.13   \n",
              "...           ...           ...           ...           ...          ...   \n",
              "1428       230115  2.658727e+07  2.008053e+08  6.485656e+07  53583334.57   \n",
              "1429     43787068  1.189417e+08  1.027792e+08  2.297040e+07  56467480.46   \n",
              "1430      1920438  4.680251e+07  3.979945e+07  2.050838e+07  19509767.05   \n",
              "1431     74765199  1.961060e+08  1.069926e+08  1.429322e+07  33945857.30   \n",
              "1432    559262022  9.921577e+07  6.465584e+07  2.951880e+07  38937474.21   \n",
              "\n",
              "              1000          1200          1400          1600          1800  \\\n",
              "0     4.884440e+06  1.731180e+07  6.923562e+06  1.728419e+06  1.097927e+07   \n",
              "1     3.387833e+07  3.675010e+07  4.422236e+07  1.228403e+07  9.543494e+06   \n",
              "2     5.892001e+06  9.928671e+05  2.514030e+06  2.312663e+07  2.726887e+06   \n",
              "3     2.163944e+07  5.459262e+07  2.057038e+07  1.404666e+07  6.839765e+06   \n",
              "4     2.283532e+06  4.892226e+07  9.276679e+06  5.144914e+07  2.932875e+06   \n",
              "...            ...           ...           ...           ...           ...   \n",
              "1428  7.993349e+06  4.649832e+07  1.456040e+07  3.830695e+07  3.027184e+07   \n",
              "1429  5.331166e+06  9.156309e+07  1.186552e+07  5.494317e+07  8.816054e+06   \n",
              "1430  2.961714e+06  1.239209e+07  3.078131e+06  6.683750e+06  5.243632e+06   \n",
              "1431  6.774219e+06  1.097531e+07  2.804238e+06  1.711634e+07  1.848868e+07   \n",
              "1432  1.858046e+08  7.324734e+07  2.310503e+07  1.055549e+07  2.761467e+07   \n",
              "\n",
              "      ...         18000         18200         18400         18600  \\\n",
              "0     ...   2384.000186   2411.610402   1754.836694   1913.843566   \n",
              "1     ...  24912.923230  19561.752830  49134.077460  23466.887240   \n",
              "2     ...   1808.905693   1754.348879   2380.075771   2799.921865   \n",
              "3     ...   8720.719579   7984.793342   9126.964638   4856.855111   \n",
              "4     ...  73223.639630  18513.552650  34590.849930  26508.658900   \n",
              "...   ...           ...           ...           ...           ...   \n",
              "1428  ...    533.228466    664.226145   1012.785569   1227.141176   \n",
              "1429  ...   5530.530466   4087.916622   7565.595333   3996.340023   \n",
              "1430  ...   1373.543878  10567.028430   9018.496753   8845.084532   \n",
              "1431  ...    171.377712    503.120565   1006.387829    693.719941   \n",
              "1432  ...  71234.185560  30830.445040   8887.613073  12479.340220   \n",
              "\n",
              "             18800         19000         19200         19400         19600  \\\n",
              "0      2566.356447   1166.833088    753.321428   2477.249148   1230.352088   \n",
              "1      6684.936444  83976.038140   5681.113413  16540.174520  26777.469810   \n",
              "2      2397.215117   3060.009491   2120.585649   2372.546729   2653.544784   \n",
              "3      7473.337512   9129.491911   6973.661419   8691.579700   8577.869889   \n",
              "4     71477.055680  13465.560970  91316.783600  35046.101910  31169.952770   \n",
              "...            ...           ...           ...           ...           ...   \n",
              "1428    644.967497    931.464923    481.317277    344.487630    813.793171   \n",
              "1429   2339.546788   6890.781898   4063.788977   7660.720919   2356.332830   \n",
              "1430   5592.151900   4841.477950  10063.064870   3558.198442  11935.343720   \n",
              "1431    528.009908     66.748512    965.164054    279.279473   1090.087526   \n",
              "1432  23250.640280  45485.686510   7711.293574  25946.214500  29700.601530   \n",
              "\n",
              "             19800  \n",
              "0       788.631319  \n",
              "1     39033.317830  \n",
              "2      1731.706378  \n",
              "3      8380.539834  \n",
              "4     40243.379180  \n",
              "...            ...  \n",
              "1428    824.823032  \n",
              "1429  10498.729370  \n",
              "1430   8452.489487  \n",
              "1431    822.759217  \n",
              "1432  29282.002610  \n",
              "\n",
              "[1433 rows x 100 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-123cd340-b351-47cb-8d6c-2396343e126e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>200</th>\n",
              "      <th>400</th>\n",
              "      <th>600</th>\n",
              "      <th>800</th>\n",
              "      <th>1000</th>\n",
              "      <th>1200</th>\n",
              "      <th>1400</th>\n",
              "      <th>1600</th>\n",
              "      <th>1800</th>\n",
              "      <th>...</th>\n",
              "      <th>18000</th>\n",
              "      <th>18200</th>\n",
              "      <th>18400</th>\n",
              "      <th>18600</th>\n",
              "      <th>18800</th>\n",
              "      <th>19000</th>\n",
              "      <th>19200</th>\n",
              "      <th>19400</th>\n",
              "      <th>19600</th>\n",
              "      <th>19800</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1043621</td>\n",
              "      <td>6.174077e+07</td>\n",
              "      <td>2.047628e+08</td>\n",
              "      <td>3.878327e+08</td>\n",
              "      <td>43762172.30</td>\n",
              "      <td>4.884440e+06</td>\n",
              "      <td>1.731180e+07</td>\n",
              "      <td>6.923562e+06</td>\n",
              "      <td>1.728419e+06</td>\n",
              "      <td>1.097927e+07</td>\n",
              "      <td>...</td>\n",
              "      <td>2384.000186</td>\n",
              "      <td>2411.610402</td>\n",
              "      <td>1754.836694</td>\n",
              "      <td>1913.843566</td>\n",
              "      <td>2566.356447</td>\n",
              "      <td>1166.833088</td>\n",
              "      <td>753.321428</td>\n",
              "      <td>2477.249148</td>\n",
              "      <td>1230.352088</td>\n",
              "      <td>788.631319</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2126883</td>\n",
              "      <td>1.391849e+08</td>\n",
              "      <td>8.998469e+07</td>\n",
              "      <td>1.171315e+08</td>\n",
              "      <td>79548896.75</td>\n",
              "      <td>3.387833e+07</td>\n",
              "      <td>3.675010e+07</td>\n",
              "      <td>4.422236e+07</td>\n",
              "      <td>1.228403e+07</td>\n",
              "      <td>9.543494e+06</td>\n",
              "      <td>...</td>\n",
              "      <td>24912.923230</td>\n",
              "      <td>19561.752830</td>\n",
              "      <td>49134.077460</td>\n",
              "      <td>23466.887240</td>\n",
              "      <td>6684.936444</td>\n",
              "      <td>83976.038140</td>\n",
              "      <td>5681.113413</td>\n",
              "      <td>16540.174520</td>\n",
              "      <td>26777.469810</td>\n",
              "      <td>39033.317830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3638673</td>\n",
              "      <td>7.667548e+06</td>\n",
              "      <td>1.335264e+07</td>\n",
              "      <td>1.898063e+07</td>\n",
              "      <td>22041971.77</td>\n",
              "      <td>5.892001e+06</td>\n",
              "      <td>9.928671e+05</td>\n",
              "      <td>2.514030e+06</td>\n",
              "      <td>2.312663e+07</td>\n",
              "      <td>2.726887e+06</td>\n",
              "      <td>...</td>\n",
              "      <td>1808.905693</td>\n",
              "      <td>1754.348879</td>\n",
              "      <td>2380.075771</td>\n",
              "      <td>2799.921865</td>\n",
              "      <td>2397.215117</td>\n",
              "      <td>3060.009491</td>\n",
              "      <td>2120.585649</td>\n",
              "      <td>2372.546729</td>\n",
              "      <td>2653.544784</td>\n",
              "      <td>1731.706378</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2498355</td>\n",
              "      <td>2.452500e+08</td>\n",
              "      <td>6.596359e+07</td>\n",
              "      <td>9.187554e+07</td>\n",
              "      <td>52900587.70</td>\n",
              "      <td>2.163944e+07</td>\n",
              "      <td>5.459262e+07</td>\n",
              "      <td>2.057038e+07</td>\n",
              "      <td>1.404666e+07</td>\n",
              "      <td>6.839765e+06</td>\n",
              "      <td>...</td>\n",
              "      <td>8720.719579</td>\n",
              "      <td>7984.793342</td>\n",
              "      <td>9126.964638</td>\n",
              "      <td>4856.855111</td>\n",
              "      <td>7473.337512</td>\n",
              "      <td>9129.491911</td>\n",
              "      <td>6973.661419</td>\n",
              "      <td>8691.579700</td>\n",
              "      <td>8577.869889</td>\n",
              "      <td>8380.539834</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>12633950144</td>\n",
              "      <td>2.344230e+07</td>\n",
              "      <td>7.651874e+07</td>\n",
              "      <td>9.061877e+06</td>\n",
              "      <td>88275540.13</td>\n",
              "      <td>2.283532e+06</td>\n",
              "      <td>4.892226e+07</td>\n",
              "      <td>9.276679e+06</td>\n",
              "      <td>5.144914e+07</td>\n",
              "      <td>2.932875e+06</td>\n",
              "      <td>...</td>\n",
              "      <td>73223.639630</td>\n",
              "      <td>18513.552650</td>\n",
              "      <td>34590.849930</td>\n",
              "      <td>26508.658900</td>\n",
              "      <td>71477.055680</td>\n",
              "      <td>13465.560970</td>\n",
              "      <td>91316.783600</td>\n",
              "      <td>35046.101910</td>\n",
              "      <td>31169.952770</td>\n",
              "      <td>40243.379180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1428</th>\n",
              "      <td>230115</td>\n",
              "      <td>2.658727e+07</td>\n",
              "      <td>2.008053e+08</td>\n",
              "      <td>6.485656e+07</td>\n",
              "      <td>53583334.57</td>\n",
              "      <td>7.993349e+06</td>\n",
              "      <td>4.649832e+07</td>\n",
              "      <td>1.456040e+07</td>\n",
              "      <td>3.830695e+07</td>\n",
              "      <td>3.027184e+07</td>\n",
              "      <td>...</td>\n",
              "      <td>533.228466</td>\n",
              "      <td>664.226145</td>\n",
              "      <td>1012.785569</td>\n",
              "      <td>1227.141176</td>\n",
              "      <td>644.967497</td>\n",
              "      <td>931.464923</td>\n",
              "      <td>481.317277</td>\n",
              "      <td>344.487630</td>\n",
              "      <td>813.793171</td>\n",
              "      <td>824.823032</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1429</th>\n",
              "      <td>43787068</td>\n",
              "      <td>1.189417e+08</td>\n",
              "      <td>1.027792e+08</td>\n",
              "      <td>2.297040e+07</td>\n",
              "      <td>56467480.46</td>\n",
              "      <td>5.331166e+06</td>\n",
              "      <td>9.156309e+07</td>\n",
              "      <td>1.186552e+07</td>\n",
              "      <td>5.494317e+07</td>\n",
              "      <td>8.816054e+06</td>\n",
              "      <td>...</td>\n",
              "      <td>5530.530466</td>\n",
              "      <td>4087.916622</td>\n",
              "      <td>7565.595333</td>\n",
              "      <td>3996.340023</td>\n",
              "      <td>2339.546788</td>\n",
              "      <td>6890.781898</td>\n",
              "      <td>4063.788977</td>\n",
              "      <td>7660.720919</td>\n",
              "      <td>2356.332830</td>\n",
              "      <td>10498.729370</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1430</th>\n",
              "      <td>1920438</td>\n",
              "      <td>4.680251e+07</td>\n",
              "      <td>3.979945e+07</td>\n",
              "      <td>2.050838e+07</td>\n",
              "      <td>19509767.05</td>\n",
              "      <td>2.961714e+06</td>\n",
              "      <td>1.239209e+07</td>\n",
              "      <td>3.078131e+06</td>\n",
              "      <td>6.683750e+06</td>\n",
              "      <td>5.243632e+06</td>\n",
              "      <td>...</td>\n",
              "      <td>1373.543878</td>\n",
              "      <td>10567.028430</td>\n",
              "      <td>9018.496753</td>\n",
              "      <td>8845.084532</td>\n",
              "      <td>5592.151900</td>\n",
              "      <td>4841.477950</td>\n",
              "      <td>10063.064870</td>\n",
              "      <td>3558.198442</td>\n",
              "      <td>11935.343720</td>\n",
              "      <td>8452.489487</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1431</th>\n",
              "      <td>74765199</td>\n",
              "      <td>1.961060e+08</td>\n",
              "      <td>1.069926e+08</td>\n",
              "      <td>1.429322e+07</td>\n",
              "      <td>33945857.30</td>\n",
              "      <td>6.774219e+06</td>\n",
              "      <td>1.097531e+07</td>\n",
              "      <td>2.804238e+06</td>\n",
              "      <td>1.711634e+07</td>\n",
              "      <td>1.848868e+07</td>\n",
              "      <td>...</td>\n",
              "      <td>171.377712</td>\n",
              "      <td>503.120565</td>\n",
              "      <td>1006.387829</td>\n",
              "      <td>693.719941</td>\n",
              "      <td>528.009908</td>\n",
              "      <td>66.748512</td>\n",
              "      <td>965.164054</td>\n",
              "      <td>279.279473</td>\n",
              "      <td>1090.087526</td>\n",
              "      <td>822.759217</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1432</th>\n",
              "      <td>559262022</td>\n",
              "      <td>9.921577e+07</td>\n",
              "      <td>6.465584e+07</td>\n",
              "      <td>2.951880e+07</td>\n",
              "      <td>38937474.21</td>\n",
              "      <td>1.858046e+08</td>\n",
              "      <td>7.324734e+07</td>\n",
              "      <td>2.310503e+07</td>\n",
              "      <td>1.055549e+07</td>\n",
              "      <td>2.761467e+07</td>\n",
              "      <td>...</td>\n",
              "      <td>71234.185560</td>\n",
              "      <td>30830.445040</td>\n",
              "      <td>8887.613073</td>\n",
              "      <td>12479.340220</td>\n",
              "      <td>23250.640280</td>\n",
              "      <td>45485.686510</td>\n",
              "      <td>7711.293574</td>\n",
              "      <td>25946.214500</td>\n",
              "      <td>29700.601530</td>\n",
              "      <td>29282.002610</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1433 rows × 100 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-123cd340-b351-47cb-8d6c-2396343e126e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-123cd340-b351-47cb-8d6c-2396343e126e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-123cd340-b351-47cb-8d6c-2396343e126e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-acc3a856-10f1-4e52-b5c9-7619fded620a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-acc3a856-10f1-4e52-b5c9-7619fded620a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-acc3a856-10f1-4e52-b5c9-7619fded620a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Triming"
      ],
      "metadata": {
        "id": "xgC27O-Lf1gh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Xarray = X.values\n",
        "song_maxs = Xarray.max(axis=1).reshape(-1,1)\n",
        "Xnorm = Xarray / song_maxs"
      ],
      "metadata": {
        "id": "il4ANlOKDLJ9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "codes, uniques = y.factorize()\n",
        "ycodes = codes\n",
        "uniques"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rfn5rxHRW1Yt",
        "outputId": "2f5c297a-19f2-47a5-d00a-3b3fede46184"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['jazz_blues', 'rock_pop', 'electronic', 'metal_punk', 'classical',\n",
              "       'world'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Generate a random array of numbers from 0 to 1432 (randomly chooses our songs)\n",
        "numbers = np.arange(0, 1432)\n",
        "np.random.shuffle(numbers)\n",
        "print(numbers)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-UJ0Ev7CXE7g",
        "outputId": "b1996ce3-ec03-408e-ad5e-1605f08ffb30"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 123 1192  462 ... 1294  860 1126]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_new = np.zeros((1200,100))\n",
        "\n",
        "ycodes_new_prior = np.zeros((1200,1))\n",
        "\n",
        "ycodes_new = ycodes_new_prior.flatten()\n",
        "display(X_new.shape)\n",
        "display(Xnorm.shape)\n",
        "\n",
        "count1 = 0\n",
        "count2 = 0\n",
        "count3 = 0\n",
        "count4 = 0\n",
        "count5 = 0\n",
        "count6 = 0\n",
        "count_overall = 0\n",
        "\n",
        "#World\n",
        "for i in range(1432):\n",
        "    if ycodes[numbers[i]] == 5 and count1 < 200: #will get 100 World songs\n",
        "      X_new[count_overall] = Xnorm[numbers[i]]\n",
        "      ycodes_new[count_overall] = ycodes[numbers[i]]\n",
        "      count1 += 1\n",
        "      count_overall += 1\n",
        "#classical\n",
        "for j in range(1432):\n",
        "    if ycodes[numbers[j]] == 4 and count2 < 200:\n",
        "        X_new[count_overall] = Xnorm[numbers[j]]\n",
        "        ycodes_new[count_overall] = ycodes[numbers[j]]\n",
        "        count2 += 1\n",
        "        count_overall += 1\n",
        "#electronic\n",
        "for k in range(1432):\n",
        "    if ycodes[numbers[k]] == 2 and count3 < 200:\n",
        "        X_new[count_overall] = Xnorm[numbers[k]]\n",
        "        ycodes_new[count_overall] = ycodes[numbers[k]]\n",
        "        count3 += 1\n",
        "        count_overall += 1\n",
        "#rock_pop\n",
        "for l in range(1432):\n",
        "    if ycodes[numbers[l]] == 1 and count4 < 200:\n",
        "        X_new[count_overall] = Xnorm[numbers[l]]\n",
        "        ycodes_new[count_overall] = ycodes[numbers[l]]\n",
        "        count4 += 1\n",
        "        count_overall += 1\n",
        "#jazz_blues\n",
        "for l in range(1432):\n",
        "    if ycodes[numbers[l]] == 0 and count5 < 200:\n",
        "        X_new[count_overall] = Xnorm[numbers[l]]\n",
        "        ycodes_new[count_overall] = ycodes[numbers[l]]\n",
        "        count5 += 1\n",
        "        count_overall += 1\n",
        "#metal_punk\n",
        "for l in range(1432):\n",
        "    if ycodes[numbers[l]] == 3 and count6 < 200:\n",
        "        X_new[count_overall] = Xnorm[numbers[l]]\n",
        "        ycodes_new[count_overall] = ycodes[numbers[l]]\n",
        "        count6 += 1\n",
        "        count_overall += 1\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "QpLTLsDnXQCo",
        "outputId": "d4c7c17e-32c8-4882-c2ec-b1745f6b3e5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "(1200, 100)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "(1433, 100)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#New test train split will have 150 train and 50 test songs for each of 6 genres\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_new, ycodes_new, stratify=ycodes_new, random_state=0)"
      ],
      "metadata": {
        "id": "Gx4ImgPtYAwx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(X_train.shape)\n",
        "print(X_test.shape)\n",
        "print(y_train.shape)\n",
        "print(y_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m6CntVkwRH37",
        "outputId": "8a2883e8-9af4-430d-e21a-20fde6c72263"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(900, 100)\n",
            "(300, 100)\n",
            "(900,)\n",
            "(300,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clf = neural_network.MLPClassifier(hidden_layer_sizes=(5,5),max_iter=10000, random_state=42)\n",
        "clf.fit(X_train,y_train)\n",
        "print(clf.score(X_train,y_train))\n",
        "display(clf.score(X_test, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "LORsUCLUYNaJ",
        "outputId": "561333cd-2ce3-4c71-fdb4-8c1d99ca2489"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5555555555555556\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "0.36"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = clf.predict(X_test)\n",
        "ConfusionMatrixDisplay.from_predictions(y_test, y_pred, cmap='Blues')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "mHextTH1Y49v",
        "outputId": "1e8f0bf3-e12f-4284-e1af-67e2586cfbd3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clf2 = GaussianNB()\n",
        "clf2.fit(X_train,y_train)\n",
        "display(clf2.score(X_train,y_train))\n",
        "display(clf2.score(X_test,y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "Lur6s1sBZMkK",
        "outputId": "260a5931-4897-4822-9d28-97df8be4baf8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "0.4"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "0.32666666666666666"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clf5 = SVC()\n",
        "clf5.fit(X_train,y_train)\n",
        "display(clf5.score(X_train,y_train))\n",
        "display(clf5.score(X_test,y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "LFqrk7soZTor",
        "outputId": "63d18bcb-b4b7-4d62-ea85-6e4c219a43fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "0.45"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "0.27666666666666667"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Tensorflow"
      ],
      "metadata": {
        "id": "nu_JAX7X8O1U"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "- 1D convolutional layers `tf.keras.layers.Conv1D` with 64 and 32 filters\n",
        "- max pooling layer `tf.keras.layers.MaxPooling1D` with a pool size of 2 to downsample\n",
        "- `Flatten` layer to convert the feature maps into a 1D vector\n",
        "- [maxpooling](https://deepai.org/machine-learning-glossary-and-terms/max-pooling#:~:text=Max%20pooling%20is%20performed%20on,maximum%20value%20within%20the%20window.)"
      ],
      "metadata": {
        "id": "quRt4wZQU6OE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##try to get consistent/reproducible answer\n",
        "\n",
        "**it failed tho**"
      ],
      "metadata": {
        "id": "XQ2MSij7u0nu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "os.environ['TF_DETERMINISTIC_OPS'] = '1'"
      ],
      "metadata": {
        "id": "PRWhqV7NusZe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tf.keras.backend.set_learning_phase(0)  # Disable learning phase"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jQgrcQ54uxp9",
        "outputId": "1bf108d7-f238-4e24-80ee-3aba4ca3fc14"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/backend.py:452: UserWarning: `tf.keras.backend.set_learning_phase` is deprecated and will be removed after 2020-10-11. To update it, simply pass a True/False value to the `training` argument of the `__call__` method of your layer or model.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Regularization\n",
        "\n",
        "Regularization is a set of methods for reducing overfitting in machine learning models. This is because we have observed that the training score was good until we evaluated with test data set. (droped from 90 percent to 32 percent) Typically, regularization trades a marginal decrease in training accuracy for an increase in generalizability. Regularization encompasses a range of techniques to correct for overfitting in machine learning models\n",
        "\n",
        "Please play with following lines inside the model\n",
        "- The drop out: `tf.keras.layers.Dropout(0.2)`\n",
        "\n",
        "- L1 and L2 regularization: `    tf.keras.layers.Dense(... kernel_regularizer=l1(0.01))` and `tf.keras.layers.Dense(... kernel_regularizer=l2(0.01))`"
      ],
      "metadata": {
        "id": "PggZlxuJU52N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num_features = X_train.shape[1] #100\n",
        "num_classes = 6\n",
        "\n",
        "model = tf.keras.models.Sequential([\n",
        "    tf.keras.layers.Flatten(),\n",
        "    tf.keras.layers.Dense(128, activation='relu'),\n",
        "    #tf.keras.layers.Dropout(0.2),                           #ReGulariAation\n",
        "    #tf.keras.layers.Dense(... kernel_regularizer=l1(0.01)), #ReGulariAation\n",
        "    #tf.keras.layers.Dense(... kernel_regularizer=l2(0.01)), #ReGulariAation\n",
        "    tf.keras.layers.Dense(num_classes, activation='softmax')\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam',\n",
        "  loss='sparse_categorical_crossentropy',\n",
        "  metrics=['accuracy'])\n",
        "\n",
        "model.fit(X_train, y_train, epochs=60,verbose=0)\n",
        "model.evaluate(X_test, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2J611qIuY9Uj",
        "outputId": "889f4456-6df8-4fee-e34d-141ee1e9e8d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10/10 [==============================] - 0s 3ms/step - loss: 1.6482 - accuracy: 0.3900\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1.6482160091400146, 0.38999998569488525]"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Evaluating (averaging many runs)\n",
        "\n",
        "This will give you average performance of the model."
      ],
      "metadata": {
        "id": "9iZLH-kq4EiO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def model_evaluation(how_many=10):\n",
        "  \"\"\"\n",
        "  Gonna return average accuracy of how_many repeat. TH\n",
        "  \"\"\"\n",
        "  how_many = repeat\n",
        "  total = 0\n",
        "  repeat = 10\n",
        "\n",
        "  for i in range(repeat):\n",
        "    model.fit(X_train, y_train, epochs=60,verbose=0)\n",
        "    score = model.evaluate(X_test, y_test)\n",
        "    total += score[1]\n",
        "\n",
        "  #print(f\"after {repeat} times, we got average accuracy of {total/repeat}\")\n",
        "  return(total/repeat)"
      ],
      "metadata": {
        "id": "1EC9vdD52HqG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "F89VpGhsXDFo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import ConfusionMatrixDisplay, confusion_matrix\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "y_pred = np.argmax(y_pred, axis=1) #make 1d array\n",
        "y_true = y_test\n",
        "conf = confusion_matrix(y_true, y_pred)\n",
        "\n",
        "# Create the confusion matrix display\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=conf)\n",
        "\n",
        "# Plot the confusion matrix\n",
        "disp.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "wG7xh-5JavmB",
        "outputId": "42dcfa9a-cd30-4761-8950-2997c6062076"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10/10 [==============================] - 0s 2ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7e011946b4f0>"
            ]
          },
          "metadata": {},
          "execution_count": 80
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#feature importance\n",
        "\n",
        "it's gonna measures the contribution of each feature to a fitted model's statistical performance on a given tabular dataset. Basically, what is most important frequency chunck of music in general?"
      ],
      "metadata": {
        "id": "AKdG_TdeT4eb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "baseline_score = model.evaluate(X_test, y_test, verbose=0)[1]\n",
        "importances = []\n",
        "\n",
        "for i in range(X_test.shape[1]):\n",
        "    X_test_permuted = X_test.copy()\n",
        "    np.random.shuffle(X_test_permuted[:, i])\n",
        "    score = model.evaluate(X_test_permuted, y_test, verbose=0)[1]\n",
        "    importances.append(baseline_score - score)\n",
        "\n",
        "print(importances)"
      ],
      "metadata": {
        "id": "giiLVKreT6D0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(importances)\n",
        "plt.title(\"what is the most important features?\")\n",
        "plt.xlabel(\"frequency range\")\n",
        "plt.ylabel(\"importance/weight\")"
      ],
      "metadata": {
        "id": "Yb3y7E4BERUh"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}